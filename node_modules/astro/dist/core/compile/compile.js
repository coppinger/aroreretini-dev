import path from "path";
import { transform } from "@astrojs/compiler";
import { AstroErrorCodes } from "../errors.js";
import { prependForwardSlash, removeLeadingForwardSlashWindows } from "../path.js";
import { AggregateError, resolveJsToTs, viteID } from "../util.js";
import { createStylePreprocessor } from "./style.js";
const configCache = /* @__PURE__ */ new WeakMap();
async function compile({
  config,
  filename,
  source,
  transformStyle
}) {
  var _a;
  let cssDeps = /* @__PURE__ */ new Set();
  let cssTransformErrors = [];
  const transformResult = await transform(source, {
    pathname: prependForwardSlash(filename),
    projectRoot: config.root.toString(),
    site: (_a = config.site) == null ? void 0 : _a.toString(),
    sourcefile: filename,
    sourcemap: "both",
    internalURL: `/@fs${prependForwardSlash(
      viteID(new URL("../../runtime/server/index.js", import.meta.url))
    )}`,
    experimentalStaticExtraction: true,
    preprocessStyle: createStylePreprocessor(transformStyle, cssDeps, cssTransformErrors)
  }).catch((err) => {
    err.code = err.code || AstroErrorCodes.UnknownCompilerError;
    throw err;
  }).then((result) => {
    switch (cssTransformErrors.length) {
      case 0:
        return result;
      case 1: {
        let error = cssTransformErrors[0];
        if (!error.code) {
          error.code = AstroErrorCodes.UnknownCompilerCSSError;
        }
        throw cssTransformErrors[0];
      }
      default: {
        const aggregateError = new AggregateError(cssTransformErrors);
        aggregateError.code = AstroErrorCodes.UnknownCompilerCSSError;
        throw aggregateError;
      }
    }
  });
  const compileResult = Object.create(transformResult, {
    cssDeps: {
      value: cssDeps
    },
    source: {
      value: source
    }
  });
  for (const c of compileResult.clientOnlyComponents) {
    c.resolvedPath = removeLeadingForwardSlashWindows(c.resolvedPath);
    if (c.specifier.endsWith(".jsx") && !c.resolvedPath.endsWith(".jsx")) {
      c.resolvedPath += ".jsx";
    }
    if (path.isAbsolute(c.resolvedPath)) {
      c.resolvedPath = resolveJsToTs(c.resolvedPath);
    }
  }
  for (const c of compileResult.hydratedComponents) {
    c.resolvedPath = removeLeadingForwardSlashWindows(c.resolvedPath);
    if (c.specifier.endsWith(".jsx") && !c.resolvedPath.endsWith(".jsx")) {
      c.resolvedPath += ".jsx";
    }
    if (path.isAbsolute(c.resolvedPath)) {
      c.resolvedPath = resolveJsToTs(c.resolvedPath);
    }
  }
  return compileResult;
}
function isCached(config, filename) {
  return configCache.has(config) && configCache.get(config).has(filename);
}
function getCachedSource(config, filename) {
  if (!isCached(config, filename))
    return null;
  let src = configCache.get(config).get(filename);
  if (!src)
    return null;
  return src.source;
}
function invalidateCompilation(config, filename) {
  if (configCache.has(config)) {
    const cache = configCache.get(config);
    cache.delete(filename);
  }
}
async function cachedCompilation(props) {
  const { config, filename } = props;
  let cache;
  if (!configCache.has(config)) {
    cache = /* @__PURE__ */ new Map();
    configCache.set(config, cache);
  } else {
    cache = configCache.get(config);
  }
  if (cache.has(filename)) {
    return cache.get(filename);
  }
  const compileResult = await compile(props);
  cache.set(filename, compileResult);
  return compileResult;
}
export {
  cachedCompilation,
  getCachedSource,
  invalidateCompilation,
  isCached
};
