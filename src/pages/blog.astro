---
import Layout from "../layouts/Layout.astro";
import IntroHeader from "../components/IntroHeader.astro";
import Button from "../components/Button.astro";
import BlogPostPreview from "../components/BlogPostPreview.astro";
import ArchiveDate from "../components/ArchiveDate.astro";

const tagArray = [{ title: "Learning", url: "#" }];

// Use Astro.glob() to fetch all posts, and then sort them by date.
let posts = (await Astro.glob("./blog/*.{md,mdx}")).sort(
  (a, b) =>
    new Date(b.frontmatter.pubDate).valueOf() -
    new Date(a.frontmatter.pubDate).valueOf()
);

posts = posts.map((post, index) => {
  return {
    ...post,
    index,
  };
});

// Group posts by month & year
const datePostsArray = [];

posts.forEach((post) => {
  let isMonthAdded = false;

  let postMonth = new Date(post.frontmatter.pubDate).toLocaleDateString(
    "en-us",
    {
      month: "long",
      year: "numeric",
    }
  );

  if (datePostsArray.length === 0) {
    datePostsArray.push(postMonth);
  }

  for (let i = 0; i < datePostsArray.length; i++) {
    if (datePostsArray[i] === postMonth) {
      isMonthAdded = true;
    }
  }
  if (isMonthAdded === false) {
    datePostsArray.push(postMonth);
  }
});

const groupedPosts = datePostsArray.map((month) => {
  return posts.filter((post) => {
    return (
      month ===
      new Date(post.frontmatter.pubDate).toLocaleDateString("en-us", {
        month: "long",
        year: "numeric",
      })
    );
  });
});
---

<Layout title="Writing" cols="1fr_2px_4fr">
  <div class="vl"></div>
  <div class="flex flex-col gap-8">
    <IntroHeader title="Writing" subtitle="Posts I've written" />
    <div>
      <section>
        <div class="grid grid-cols-[auto_1fr] gap-8">
          {
            groupedPosts.map((month, indexGrouped) => {
              let [datePostMonth, datePostYear] =
                datePostsArray[indexGrouped].split(" ");
              return (
                <Fragment>
                  <ArchiveDate month={datePostMonth} year={datePostYear} />
                  <ul class="grid gap-8 md:gap-16 max-w-md">
                    {month.map((post, indexMonth, array) => {
                      let oppositeIndex = posts.length - post.index;
                      return (
                        <li>
                          <BlogPostPreview
                            post={post}
                            postNumber={oppositeIndex}
                            postTitle={post.frontmatter.title}
                            postTags={tagArray}
                            postUrl={post.url}
                            postDate={post.frontmatter.pubDate}
                            post={post}
                            previewToggle={true}
                          />
                        </li>
                      );
                    })}
                  </ul>
                </Fragment>
              );
            })
          }
        </div>
      </section>
    </div>
  </div>
</Layout>
